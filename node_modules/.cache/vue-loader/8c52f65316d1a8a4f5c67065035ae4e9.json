{"remainingRequest":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema1.vue?vue&type=template&id=8834ed46&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema1.vue","mtime":1746508314396},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}