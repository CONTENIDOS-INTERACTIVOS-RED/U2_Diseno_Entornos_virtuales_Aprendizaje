{"remainingRequest":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema2.vue?vue&type=template&id=f3a9bdc6&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema2.vue","mtime":1746508314397},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diseno_Entornos_virtuales_Aprendizaje/U2_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}